// <auto-generated />
using System;
using APIBrotherTech.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APIBrotherTech.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240906131854_AdicionandoTabelas")]
    partial class AdicionandoTabelas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APIBrotherTech.Models.Client", b =>
                {
                    b.Property<long>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ClientId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InterestedInDiversification")
                        .HasColumnType("bit");

                    b.Property<bool>("InterestedInHighReturns")
                        .HasColumnType("bit");

                    b.Property<bool>("InterestedInTechnology")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientId");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("APIBrotherTech.Models.Cryptocurrency", b =>
                {
                    b.Property<long>("CryptocurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CryptocurrencyId"));

                    b.Property<string>("GrowthHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PotentialReturn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CryptocurrencyId");

                    b.ToTable("CriptoMoedas", (string)null);
                });

            modelBuilder.Entity("APIBrotherTech.Models.InvestmentTip", b =>
                {
                    b.Property<long>("InvestmentTipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("InvestmentTipId"));

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("CryptocurrencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TipDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InvestmentTipId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CryptocurrencyId");

                    b.ToTable("DicasInvest", (string)null);
                });

            modelBuilder.Entity("APIBrotherTech.Models.Notification", b =>
                {
                    b.Property<long>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NotificationId"));

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("CryptocurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CryptocurrencyId");

                    b.ToTable("Notificacoes", (string)null);
                });

            modelBuilder.Entity("APIBrotherTech.Models.InvestmentTip", b =>
                {
                    b.HasOne("APIBrotherTech.Models.Client", "Client")
                        .WithMany("InvestmentTips")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIBrotherTech.Models.Cryptocurrency", "Cryptocurrency")
                        .WithMany("InvestmentTips")
                        .HasForeignKey("CryptocurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Cryptocurrency");
                });

            modelBuilder.Entity("APIBrotherTech.Models.Notification", b =>
                {
                    b.HasOne("APIBrotherTech.Models.Client", "Client")
                        .WithMany("Notifications")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIBrotherTech.Models.Cryptocurrency", "Cryptocurrency")
                        .WithMany("Notifications")
                        .HasForeignKey("CryptocurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Cryptocurrency");
                });

            modelBuilder.Entity("APIBrotherTech.Models.Client", b =>
                {
                    b.Navigation("InvestmentTips");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("APIBrotherTech.Models.Cryptocurrency", b =>
                {
                    b.Navigation("InvestmentTips");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
